#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require

#include "random.glsl"
#include "shared.glsl"

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT top_level_accel_struct;
layout(set = 1, binding = 0, rgba8) uniform image2D output_image;
layout(set = 2, binding = 0) uniform CameraLens {
  mat4 proj_inverse;
} camera_lens;

layout(scalar, push_constant) uniform PushConstants {
  mat4 view_inverse;
  float time;
} push_constants;

// The number of sample rays cast per pixel.
const int MAX_SAMPLES = 1;
const float INV_MAX_SAMPLES = 1.0 / float(MAX_SAMPLES);

// The maximum number of bounces for a ray.
const uint MAX_BOUNCES = 1;

void main() {
  // uint seed_index = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, uint(push_constants.time * 1024.0));
  // uint seed_index = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, 0);
  uint seed_index = 0;

  // The final color of the pixel accumulated across all samples.
  vec3 final_color = vec3(0);

  for(int j = 0; j < MAX_SAMPLES; ++j) {
    // Random per-sample jittering to help achieve a more uniform distribution of samples.
    const vec2 jitter = vec2(0.1) + 0.8*vec2(rand(seed_index), rand(seed_index));
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + jitter;
    const vec2 uv_coord = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    const vec2 ndc = 2.0 * uv_coord - 1.0;

    const vec4 origin = push_constants.view_inverse * vec4(0, 0, 0, 1);
    const vec4 target = camera_lens.proj_inverse * vec4(ndc.x, -ndc.y, 1, 1); // Flip the Y-axis when transforming to world-space.
    const vec4 direction = push_constants.view_inverse * vec4(normalize(target.xyz), 0);

    // Initialize the ray payload parameters.
    ray_payload.origin = origin.xyz;
    ray_payload.direction = direction.xyz;
    ray_payload.seed = seed_index;
    ray_payload.exit = false;

    // Set the initial ray lighting values.
    ray_payload.throughput = vec3(1);
    ray_payload.radiance = vec3(0);

    // Ray tracing loop. We cast `MAX_BOUNCES + 1` rays to account for the initial ray.
    for(uint i = 0; i <= MAX_BOUNCES; ++i) {
      ray_payload.bounce_count = i;

      // The index of the miss shader to execute.
      const uint miss_shader_index = 0;
      const int payload_index = 0;

      // TODO: Enable greater flexibility than strictly opaque intersections.
      // Use the origin and direction of the payload to allow hit shaders to setup for the next ray.
      traceRayEXT(
        top_level_accel_struct,
        gl_RayFlagsNoneEXT,
        0xFF, 0, 0,
        miss_shader_index,
        ray_payload.origin,
        RAY_MIN_DISTANCE,
        ray_payload.direction,
        RAY_MAX_DISTANCE,
        payload_index);

      if (ray_payload.exit || dot(ray_payload.throughput, ray_payload.throughput) < 0.1) {
        break;
      }
    }

    // The color accumulated for the current sample ray.
    vec3 ray_color = clamp(ray_payload.radiance.rgb, vec3(0), vec3(1));

    // Helper to reduce "fireflies" in the ray traced image.
    float luminance = dot(ray_color, vec3(0.212671, 0.715160, 0.072169));
    if(luminance > 45.7) {
      ray_color *= 45.7 / luminance;
    }

    // Apply the accumulated color, modified by the ambient occlusion factor.
    final_color += ray_color; 
  }

  // Normalize the final color by the number of samples.
  final_color *= INV_MAX_SAMPLES;

  // TODO: Consider using an accumulation buffer to allow aliasing over time.

  // Write the final color to the output image.
  imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(linear_to_srgb(final_color), 0));
}
